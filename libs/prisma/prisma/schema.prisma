// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  JOUEUR
  ADMIN
  GAMEDESIGNER
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role Roles @default(JOUEUR)

  username        String?
  displayUsername String?
  Deck            Deck[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Deck {
  id                 String   @id @default(uuid())
  name               String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  bakugans           String[]
  ability            String[]
  exclusiveAbilities String[]
  gateCards          String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Rooms {
  id        String   @id @default(uuid())
  player1Id String
  p1Deck    String
  player2Id String
  p2Deck    String
  finished  Boolean  @default(false)
  winner    String
  looser    String
  createdAt DateTime @default(now())
}
